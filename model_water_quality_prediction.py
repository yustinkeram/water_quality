# -*- coding: utf-8 -*-
"""model_water_quality prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hl_jJ_XaFOHZop75GJL80TQ2V93XvtnN

------------------------------------------
## import libraries
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

import plotly.offline as py
py.init_notebook_mode(connected=True)
import plotly.graph_objs as go
import plotly.tools as tls
import plotly.figure_factory as ff

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Activation,Dropout



# Load data
data = pd.read_csv('/content/water_potability.csv')



data = pd.read_csv('/content/water_potability.csv')

data

data.isnull().sum()

"""-----------------------------------------
## EDA
"""

data[data['Potability']==0][['ph','Sulfate','Trihalomethanes']].median()

data[data['Potability']==1][['ph','Sulfate','Trihalomethanes']].median()

data['ph'].fillna(value=data['ph'].median(),inplace=True)
data['Trihalomethanes'].fillna(value=data['Trihalomethanes'].median(),inplace=True)
data = data.dropna()

"""-----------------------------------------
## Data Splitting
"""

X = data.drop('Potability',axis=1).values
y = data['Potability'].values

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=40)

"""-----------------------------
## Data Scalling
"""

scaler = MinMaxScaler()

scaler.fit(X_train)

X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

print('training shape : ',X_train.shape)
print('testing shape : ',X_test.shape)

"""------------------------------
## Modelling
"""

# Contoh membuat model sederhana
model = Sequential([
    Dense(64, activation='relu', input_shape=(9,)),
    Dense(1, activation='sigmoid')
])

# Kompilasi model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(x=X_train,
          y=y_train,
          epochs=100,
          validation_data=(X_test, y_test), verbose=1
          )

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print(cm)

accuracy = (cm[0][0]+cm[1][1])/(cm[0][0]+cm[0][1]+cm[1][0]+cm[1][1])
print("Accuracy: "+ str(accuracy*100)+"%")

# Contoh membuat model sederhana
model = Sequential([
    Dense(64, activation='relu', input_shape=(9,)),
    Dense(1, activation='sigmoid')
])

# Kompilasi model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(x=X_train,
          y=y_train,
          epochs=200,
          validation_data=(X_test, y_test), verbose=1
          )

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print(cm)

accuracy = (cm[0][0]+cm[1][1])/(cm[0][0]+cm[0][1]+cm[1][0]+cm[1][1])
print("Accuracy: "+ str(accuracy*100)+"%")

# Contoh membuat model sederhana
model = Sequential([
    Dense(64, activation='relu', input_shape=(9,)),
    Dense(1, activation='sigmoid')
])

# Kompilasi model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(x=X_train,
          y=y_train,
          epochs=300,
          validation_data=(X_test, y_test), verbose=1
          )

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print(cm)

accuracy = (cm[0][0]+cm[1][1])/(cm[0][0]+cm[0][1]+cm[1][0]+cm[1][1])
print("Accuracy: "+ str(accuracy*100)+"%")

print("Masukkan nilai untuk fitur berikut:")
pH = float(input("pH: "))
hardness = float(input("Hardness: "))
solids = float(input("Solids: "))
chloramines = float(input("Chloramines: "))
sulfate = float(input("Sulfate: "))
conductivity = float(input("Conductivity: "))
organic_carbon = float(input("Organic Carbon: "))
trihalomethanes = float(input("Trihalomethanes: "))
turbidity = float(input("Turbidity: "))

# Membuat DataFrame dari input
input_data =pd.DataFrame({
    'pH': [pH],
    'Hardness': [hardness],
    'Solids': [solids],
    'Chloramines': [chloramines],
    'Sulfate': [sulfate],
    'Conductivity': [conductivity],
    'Organic_carbon': [organic_carbon],
    'Trihalomethanes': [trihalomethanes],
    'Turbidity': [turbidity]
})

# Normalisasi data input
input_normalized = scaler.transform(input_data)

# Menggunakan model untuk membuat prediksi
prediction = model.predict(input_normalized)
predicted_label = (prediction > 0.5).astype(int)  # Mengasumsikan threshold 0.5 untuk klasifikasi

# Menampilkan hasil prediksi
print(f"Prediksi kualitas air (0: Tidak layak minum, 1: Layak minum): {predicted_label[0]}")

# Simpan model ke file HDF5
model.save('model_water_quality_prediction.h5')

#from google.colab import files
files.download('model_water_quality_prediction.h5')
